<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 袁阊越</title>
    <link>http://example.org/post/</link>
    <description>Recent content in Posts on 袁阊越</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Nov 2019 01:06:10 +0800</lastBuildDate>
    
	<atom:link href="http://example.org/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shiro初识</title>
      <link>http://example.org/post/shiro%E5%88%9D%E8%AF%86/</link>
      <pubDate>Sun, 17 Nov 2019 01:06:10 +0800</pubDate>
      
      <guid>http://example.org/post/shiro%E5%88%9D%E8%AF%86/</guid>
      <description>Shiro学习 简介  Apache Shiro 是 Java 的一个安全框架。目前，使用 Apache Shiro 的人越来越多，因为它相当简单，对比 Spring Security，可能没有 Spring Security 做的功能强大，但是在实际工作时可能并不需要那么复杂的东西，所以使用小而简单的 Shiro 就足够了。对于它俩到底哪个好，这个不必纠结，能更简单的解决项目问题就好了。
 概念  https://www.w3cschool.cn/shiro/co4m1if2.html 详细
 使用 依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.11&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;commons-logging&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-logging&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.1.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shiro&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shiro-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.3.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  配置文件 [users] zhangsan=123456,admin lisi=123123,superadmin [roles] admin=product:create,product:delete,product:update,product:view public=product:view  读取配置类 //1.初始化SecurityManger安全管理器 DefaultSecurityManager sm = new DefaultSecurityManager(); //2.配置用户的权限信息到安全管理器中 Realm realm = new IniRealm(&amp;quot;classpath:shrio.ini&amp;quot;); sm.setRealm(realm); //3.使用SecurityUtils将securityManager设置到运行环境中 SecurityUtils.setSecurityManager(sm);  因为没有slf4j的配置，运行控制台报出</description>
    </item>
    
    <item>
      <title>设计模式-单例模式</title>
      <link>http://example.org/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 30 Oct 2019 14:13:05 +0800</pubDate>
      
      <guid>http://example.org/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>单例模式  这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。保证一个类仅有一个实例，并提供一个访问它的全局访问点。
 单例&amp;mdash;饿汉式  类初始化直接创建对象 不管是否需要这个对象 线程安全
/** * &amp;lt;p&amp;gt; * 1. 构造器私有化 不能被实例化 * 2. 私有变量保存 * &amp;lt;p&amp;gt; * @author: YuanChangYue * @create: 2019-10-08 14:05 */ public class Singleton1 { public static final Singleton1 INSTANCE = new Singleton1(); private Singleton1() { } }  枚举类 该类型的对象只有几个有限的状态 通过限定一个 就是单例了
/** * @author: YuanChangYue * @create: 2019-10-08 14:05 */ public enum Singleton2 { //单例 INSTANCE }  在静态块中初始化，从properties文件中读取带参构造器的值。</description>
    </item>
    
    <item>
      <title>Mybatis原理浅析和践行</title>
      <link>http://example.org/post/mybatis%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</link>
      <pubDate>Tue, 22 Oct 2019 16:41:39 +0800</pubDate>
      
      <guid>http://example.org/post/mybatis%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</guid>
      <description>Mybatis原理浅析和践行  官方网站的提供非xml的自定的的类 实现的mybatis创建SqlSessionFactory和进行配置
https://mybatis.org/mybatis-3/getting-started.html
//获得数据源 DataSource dataSource = BlogDataSourceFactory.getBlogDataSource(); //初始化事务,Mybatis的运行使用到事务 TransactionFactory transactionFactory = new JdbcTransactionFactory(); //初始化Mybatis的运行环境 Environment environment = new Environment(&amp;quot;development&amp;quot;, transactionFactory, dataSource); //在以上初始化的环境中，获得配置信息 Configuration configuration = new Configuration(environment); //添加mapper类到配置类中 configuration.addMapper(BlogMapper.class); //创建出sqlSessionFatory SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);   使用以上官方的代码
 配置数据源
/** * 使用c3p0创建数据源 * * @return dataSource */ public ComboPooledDataSource createDateSource() { ComboPooledDataSource dataSource = new ComboPooledDataSource(); try { dataSource.setDriverClass(&amp;quot;com.mysql.jdbc.Driver&amp;quot;); dataSource.setJdbcUrl(&amp;quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;amp;characterEncoding=utf8&amp;quot;); dataSource.setUser(&amp;quot;root&amp;quot;); dataSource.setPassword(&amp;quot;root&amp;quot;); } catch (PropertyVetoException e) { e.</description>
    </item>
    
    <item>
      <title>Idea远程调试</title>
      <link>http://example.org/post/idea%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</link>
      <pubDate>Mon, 23 Sep 2019 23:28:40 +0800</pubDate>
      
      <guid>http://example.org/post/idea%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</guid>
      <description>IntelliJ IDEA 远程调试阿里云  前提是项目已经部署到阿里云上，这里使用的是阿里云的轻应用服务器，经行调试微信端访问服务器的过程
 停止tomcat service tomcat stop  修改tomcat的配置 在CentOS下，进入到tomcat路径，下面演示均为我自己的路径。
cd /usr/local/tomcat  修改catalina.sh ，tomcat启动的时候会调用到，以及tomcat的优化对caralina.sh进行修改，在里面加上：
CATALINA_OPTS=&amp;quot;-Xdebug -Xrunjdwp:transport=dt_socket,address=8888,server=y,suspend=n&amp;quot;  小提示：使用Vim编辑器 ，按下i 插入，完成后esc退出编辑，shift+: ，输入wq保存并退出
添加安全组和防火墙 防火墙放行端口 之前在catalina.sh中添加的调试端口为8888idea 添加远程连接与设置 测试远程调试 在需要的地方打上断点，触发远程测试，我这里是使用的微信开发出现这样的界面就是连接成功了</description>
    </item>
    
    <item>
      <title>阿里云Tomcat访问80端口</title>
      <link>http://example.org/post/%E9%98%BF%E9%87%8C%E4%BA%91tomcat%E8%AE%BF%E9%97%AE80%E7%AB%AF%E5%8F%A3/</link>
      <pubDate>Fri, 20 Sep 2019 18:49:02 +0800</pubDate>
      
      <guid>http://example.org/post/%E9%98%BF%E9%87%8C%E4%BA%91tomcat%E8%AE%BF%E9%97%AE80%E7%AB%AF%E5%8F%A3/</guid>
      <description>阿里云轻应用服务器Tomcat访问80端口  使用阿里云轻应用服务器, 系统为centOS 7.3 , 在配置好JDK，MySql，Tomcat 后部署自己的项目 ，tomcat8080端口访问，设置80端口却不行，安全组和防火墙配置好了，域名备案也成功了，以及配置server.xml修改为80，同样是不能访问80
 问题重现： 安全组: 防火墙： 监听端口： 防火墙启动: 之上的方式都是不能解决的，于是请求了阿里人工：
问题依然没有解决
解决方式： 首先查看防火墙是否启动：
systemctl status firewalld  这样就是启动了，没有启动可以用：
systemctl start firewalld  接着
firewall-cmd --add-masquerade --permanen  再将80端口映射到8080端口
firewall-cmd --add-forward-port=port=80:proto=tcp:toport=8080 --permanent  最后重载firewall
firewall-cmd --reload  这样就可以成功使用80端口访问tomcat了。</description>
    </item>
    
    <item>
      <title>Git记录-Please commit your changes or stash them before you merge</title>
      <link>http://example.org/post/git%E8%AE%B0%E5%BD%95-1/</link>
      <pubDate>Fri, 30 Aug 2019 14:49:43 +0800</pubDate>
      
      <guid>http://example.org/post/git%E8%AE%B0%E5%BD%95-1/</guid>
      <description>Git记录-Please commit your changes or stash them before you merge 错误重现  情况是想要将github上的远程仓库的修改更新到本地
 解决办法 根据提示，可以commit再meger。这里我选择直接使用 git pull ，之前我是使用的 git fetch 是将远程主机的最新内容拉到本地检查了以后决定是否合并到工作本机分支中。使用git pull 可以同时操作了我之前的两个步骤 git fetch+git meger ，则是将远程主机的最新内容拉下来后直接合并。在这之前将 git 重置一下 ， git reset --hard。</description>
    </item>
    
    <item>
      <title>java后端开发通过虚拟路径访问本地图片</title>
      <link>http://example.org/post/%E5%90%8E%E7%AB%AF%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95-%E9%80%9A%E8%BF%87%E8%99%9A%E6%8B%9F%E8%B7%AF%E5%BE%84%E8%AE%BF%E9%97%AE%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</link>
      <pubDate>Wed, 21 Aug 2019 10:56:01 +0800</pubDate>
      
      <guid>http://example.org/post/%E5%90%8E%E7%AB%AF%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95-%E9%80%9A%E8%BF%87%E8%99%9A%E6%8B%9F%E8%B7%AF%E5%BE%84%E8%AE%BF%E9%97%AE%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</guid>
      <description>通过虚拟路径访问本地图片  情况说明： 之前存入在数据库中的图片地址是本地的相对路径，需要实现的是在html页面中img标签src中直接写上本地图片资源的相对路径，得以显示。
 1. 错误重现 数据库：
没有做任何设置之前：
2. 解决步骤  第一步：  在Tomcat目录下找到conf文件夹，打开server.xml D:\apache-tomcat-9.0.22\conf\server.xml
&amp;lt;Host name=&amp;quot;localhost&amp;quot; appBase=&amp;quot;webapps&amp;quot; unpackWARs=&amp;quot;true&amp;quot; autoDeploy=&amp;quot;true&amp;quot;&amp;gt; &amp;lt;Valve className=&amp;quot;org.apache.catalina.valves.AccessLogValve&amp;quot; directory=&amp;quot;logs&amp;quot; prefix=&amp;quot;localhost_access_log&amp;quot; suffix=&amp;quot;.txt&amp;quot;/&amp;gt; &amp;lt;!-- eclipse --&amp;gt; &amp;lt;Context docBase=&amp;quot;shopping&amp;quot; path=&amp;quot;/shopping&amp;quot; reloadble=&amp;quot;true&amp;quot; source=&amp;quot; org.eclipse.jst.jee.server:o2o&amp;quot;&amp;gt; &amp;lt;/Context&amp;gt; &amp;lt;!-- 在此处添加以下内容 我的图片位置为 ： D:\projectdev\img\upload\item\headtitle\XXXXX.jpg --&amp;gt; &amp;lt;Context path=&amp;quot;/upload&amp;quot; docBase=&amp;quot;D:\projectdev\img\upload&amp;quot; crossContext=&amp;quot;true&amp;quot; reloadable=&amp;quot;true&amp;quot; debug=&amp;quot;0&amp;quot;&amp;gt; &amp;lt;/Context&amp;gt; &amp;lt;/Host&amp;gt;   第二步： 开发工具为 Idea  快捷键： shift+alt+F10 , 进入Run小窗口
​ 进入Tomcat设置界面：
​ 选择自己的当前项目的Tomcat：
​ 设置路径：
​ 重启tomcat:
​ 访问成功：</description>
    </item>
    
    <item>
      <title>SpringBoot数据访问</title>
      <link>http://example.org/post/springboot%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/</link>
      <pubDate>Tue, 20 Aug 2019 10:55:58 +0800</pubDate>
      
      <guid>http://example.org/post/springboot%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/</guid>
      <description>SpringBoot访问数据库  springboot 默认支持很多数据源 有：Hikari，Tomcat， Dbcp2，Generic。 springboot2.X默认数据源为：Hikari。下面还会讲到切换数据源到阿里的Druid， 同时和springboot桥接进行数据库访问的方式也有很多：JDBC，Mybatis，JPA
 源码：DataSourceAutoConfiguration &amp;ndash;&amp;gt;PooledDataSourceConfiguration可以看到数据源的配置
@Configuration @Conditional({DataSourceAutoConfiguration.PooledDataSourceCondition.class}) @ConditionalOnMissingBean({DataSource.class, XADataSource.class}) @Import({Hikari.class, Tomcat.class, Dbcp2.class, Generic.class, DataSourceJmxConfiguration.class}) protected static class PooledDataSourceConfiguration { protected PooledDataSourceConfiguration() { } }  JDBC访问数据库 1. 准备工作  pom.xml
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-jdbc&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.1.47&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  application.yml
spring: datasource: username: root password: url: jdbc:mysql://localhost:3306/jdbc driver-class-name: com.mysql.jdbc.Driver   2. 创建表  springboot创建表相关源码， 通过DataSourceInitializer拿到数据源，可以创建表结构或者表数据
 //创建表结构 public boolean createSchema() { List&amp;lt;Resource&amp;gt; scripts = this.</description>
    </item>
    
    <item>
      <title>SpringBoot与web开发(六)----SpringBoot容器</title>
      <link>http://example.org/post/springboot%E4%B8%8Eweb%E5%BC%80%E5%8F%91%E5%85%AD/</link>
      <pubDate>Mon, 19 Aug 2019 18:58:44 +0800</pubDate>
      
      <guid>http://example.org/post/springboot%E4%B8%8Eweb%E5%BC%80%E5%8F%91%E5%85%AD/</guid>
      <description>SpringBoot 容器  SpringBoot的容器默认使用的Tomcat，
 1.如何修改Servlet容器的相关配置？  修改Servlet的配置 （org.springframework.boot.autoconfigure.web.ServerProperties）
server.servlet.context-path=/crud server.port=8081   2.如何注册自己的Servlet,Filter,Listener  SpringBoot默认的是以jar包的方式启动嵌入Serlvet容器，没有Web.xml。
  注册三大组件的方式
 ServletRegistrationBean
 FilterRegistrationBean
 ServletListenerRegistrationBean
/** * @program: spring-boot-restful-crud * @description: servlet配置类 * @author: YuanChangYue * @create: 2019-08-19 19:20 */ @Configuration public class MyServletConfig { @Bean public ServletRegistrationBean myServlet() { return new ServletRegistrationBean&amp;lt;&amp;gt;(new MyServlet(), &amp;quot;/myServlet&amp;quot;); } @Bean public FilterRegistrationBean myFilter() { FilterRegistrationBean&amp;lt;Filter&amp;gt; registrationBean = new FilterRegistrationBean&amp;lt;&amp;gt;(); registrationBean.setFilter(new MyFilter()); registrationBean.setUrlPatterns(Arrays.asList(&amp;quot;/hello&amp;quot;, &amp;quot;/myServlet&amp;quot;)); return registrationBean; } @Bean public ServletListenerRegistrationBean myListen() { return new ServletListenerRegistrationBean(new MyListen()); } }  /** * @program: spring-boot-restful-crud * @description: 自定义Listen * @author: YuanChangYue * @create: 2019-08-19 19:42 */ public class MyListen implements ServletContextListener { @Override public void contextInitialized(ServletContextEvent sce) { System.</description>
    </item>
    
    <item>
      <title>SpringBoot与web开发(五) ---- SpringBoot 错误处理机制</title>
      <link>http://example.org/post/springboot%E4%B8%8Eweb%E5%BC%80%E5%8F%91%E4%BA%94/</link>
      <pubDate>Wed, 14 Aug 2019 14:13:20 +0800</pubDate>
      
      <guid>http://example.org/post/springboot%E4%B8%8Eweb%E5%BC%80%E5%8F%91%E4%BA%94/</guid>
      <description>SpringBoot 错误处理  SpringBoot 默认错误机制，返回一个错误页面和 json数据
  浏览器   其它客户端  1. 原理  源码 ErrorMvcAutoConfiguration
 其中有几个重要的组件：
 DefaultErrorAttributes ： 共享信息
 timestamp 时间 status 状态码 error 错误提示 exception 异常对象 message 异常信息 errors JSR303 数据校验的信息  DefaultErrorViewResolver
@Override public ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status, Map&amp;lt;String, Object&amp;gt; model) { ModelAndView modelAndView = resolve(String.valueOf(status.value()), model); if (modelAndView == null &amp;amp;&amp;amp; SERIES_VIEWS.containsKey(status.series())) { modelAndView = resolve(SERIES_VIEWS.get(status.series()), model); } return modelAndView; } private ModelAndView resolve(String viewName, Map&amp;lt;String, Object&amp;gt; model) { String errorViewName = &amp;quot;error/&amp;quot; + viewName; //使用模板引擎 TemplateAvailabilityProvider provider = this.</description>
    </item>
    
    <item>
      <title>SpringBoot与web开发(四)-----登录拦截</title>
      <link>http://example.org/post/springboot%E4%B8%8Eweb%E5%BC%80%E5%8F%91%E5%9B%9B/</link>
      <pubDate>Tue, 13 Aug 2019 08:56:37 +0800</pubDate>
      
      <guid>http://example.org/post/springboot%E4%B8%8Eweb%E5%BC%80%E5%8F%91%E5%9B%9B/</guid>
      <description>准备工作  页面downloadboostrap的官方实例页面，方便练习
资源来自：https://getbootstrap.com/docs/4.3/examples/
 资源的目录如下：
1.controller层 package com.changyue.springbootresetfucrud.controller; import org.springframework.stereotype.Controller; import org.springframework.util.StringUtils; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestParam; import javax.servlet.http.HttpSession; import java.util.Map; /** * @program: spring-boot-restful-crud * @description: 用户控制器 * @author: YuanChangYue * @create: 2019-08-13 17:59 */ @Controller public class LoginController { /** * 用户登录 * * @param username 用户名 默认测试 123 * @param password 密码 默认测试 123 * @param map map * @param httpSession session * @return 页面名称 */ @PostMapping(&amp;quot;/user/login&amp;quot;) public String login(@RequestParam(&amp;quot;username&amp;quot;) String username, @RequestParam(&amp;quot;password&amp;quot;) String password, Map&amp;lt;String, Object&amp;gt; map, HttpSession httpSession) { if (&amp;quot;123&amp;quot;.</description>
    </item>
    
    <item>
      <title>SpringBoot与Web开发(三)-----Spring MVC</title>
      <link>http://example.org/post/springboot%E4%B8%8Eweb%E5%BC%80%E5%8F%91%E4%B8%89/</link>
      <pubDate>Mon, 12 Aug 2019 16:36:54 +0800</pubDate>
      
      <guid>http://example.org/post/springboot%E4%B8%8Eweb%E5%BC%80%E5%8F%91%E4%B8%89/</guid>
      <description>Spring Boot 与 Spring MVC  根据SpringBoot 官方文档中的资料 ，可以看出SpringBoot和SpringMVC的关系。
本章节提到的官文文档地址如下： &amp;lt;https://docs.spring.io/spring-boot/docs/2.1.7.RELEASE/reference/html/boot-features-developing-web-applications.html#boot-features-spring-mvc-auto-configuration
 1. Spring Boot 中Spring MVC 自动配置 官方文档中的原文如下：
Spring Boot provides auto-configuration for Spring MVC that works well with most applications.
The auto-configuration adds the following features on top of Spring’s defaults:
 Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans.
 自动配置viewResolver （视图解析器：根据方法返回的值获得视图对象 ） ContentNegotiatingViewResolver ： 组合所有的试图解析器 自定义：==可以自己给容器中添加视图解析器 ，自动为我们组合起来==  Support for serving static resources, including support for WebJars (covered later in this document)).</description>
    </item>
    
    <item>
      <title>SpringBoot与web开发(二)-----Thymeleaf 模板引擎</title>
      <link>http://example.org/post/springboot%E4%B8%8Eweb%E5%BC%80%E5%8F%91%E4%BA%8C/</link>
      <pubDate>Sat, 10 Aug 2019 22:20:04 +0800</pubDate>
      
      <guid>http://example.org/post/springboot%E4%B8%8Eweb%E5%BC%80%E5%8F%91%E4%BA%8C/</guid>
      <description>Thymeleaf 模板引擎 1. 引入Thymeleaf &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;  @ConfigurationProperties(prefix = &amp;quot;spring.thymeleaf&amp;quot;) public class ThymeleafProperties { private static final Charset DEFAULT_ENCODING = StandardCharsets.UTF_8; public static final String DEFAULT_PREFIX = &amp;quot;classpath:/templates/&amp;quot;; public static final String DEFAULT_SUFFIX = &amp;quot;.html&amp;quot;;  将html页面放在templates目录下使用模板引擎 渲染页面
 html中引入
&amp;lt;html lang=&amp;quot;en&amp;quot; xmlns:th=&amp;quot;http://www.thymeleaf.org&amp;quot;&amp;gt;   2. 语法规则 来自官网的使用手册：http://www.thymeleaf.org
 th 语法   表达式
Simple expressions:（表达式语法） Variable Expressions: ${...}：获取变量值；OGNL； 1）、获取对象的属性、调用方法 2）、使用内置的基本对象： #ctx : the context object. #vars: the context variables.</description>
    </item>
    
    <item>
      <title>SpringBoot与web开发(一)-----SpringBoot快速使用</title>
      <link>http://example.org/post/springboot%E4%B8%8Eweb%E5%BC%80%E5%8F%91%E4%B8%80/</link>
      <pubDate>Sat, 10 Aug 2019 20:15:09 +0800</pubDate>
      
      <guid>http://example.org/post/springboot%E4%B8%8Eweb%E5%BC%80%E5%8F%91%E4%B8%80/</guid>
      <description>1. 开始使用  创建springBoot 应用 选择需要的模块  创建springboot
选择模块
 SpringBoot 已经为我们把需要的配置自动装配好，只需要在后续的开发中，在配置文件中进行设置即可
 编写代码
  2. 自动配置 XXXXXAutoConfiguration ：在容器中自动配置组件 XXXXXProperties ： 配置类  这些文件都在通过Mavan引入的外部库中，org.springframework.boot.autoconfigure。
3. 静态资源映射规则  默认创建的 SpringBoot 项目是没有web文件夹的，那如何映射css，js等静态资源呢？
 Spring boot 会自动装配WebMvcAutoConfiguration类，会对静态资源的映射做出规定,
@Override public void addResourceHandlers(ResourceHandlerRegistry registry) { if (!this.resourceProperties.isAddMappings()) { logger.debug(&amp;quot;Default resource handling disabled&amp;quot;); return; } Duration cachePeriod = this.resourceProperties.getCache().getPeriod(); CacheControl cacheControl = this.resourceProperties.getCache().getCachecontrol().toHttpCacheControl(); if (!registry.hasMappingForPattern(&amp;quot;/webjars/**&amp;quot;)) { customizeResourceHandlerRegistration(registry.addResourceHandler(&amp;quot;/webjars/**&amp;quot;) .addResourceLocations(&amp;quot;classpath:/META-INF/resources/webjars/&amp;quot;) .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl)); } String staticPathPattern = this.mvcProperties.getStaticPathPattern(); if (!</description>
    </item>
    
    <item>
      <title>桶排序</title>
      <link>http://example.org/post/%E6%A1%B6%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Wed, 07 Aug 2019 18:01:01 +0800</pubDate>
      
      <guid>http://example.org/post/%E6%A1%B6%E6%8E%92%E5%BA%8F/</guid>
      <description>import java.util.Scanner; /** * @program: DSClassDesign * @description: 72:桶式排序 * @author: YuanChangYue * @TestData 6634 9796 435 1405 6123 10001 11459 12018 10372 19874 12860 11326 7096 30205 27010 * 6634,9796,435,1405,6123,10001,11459,12018,10372,19874,12860,11326,7096,30205,27010 * @create: 2019-06-18 11:49 */ public class Main { public static void main(String[] args) { Scanner in = new Scanner(System.in); int[] arrays = new int[15]; for (int i = 0; i &amp;lt; 15; i++) arrays[i] = in.nextInt(); in.close(); barrelSort(arrays); } /** * 进行桶排序 * * @param arr 排序的数组 */ private static void barrelSort(int[] arr) { int[][] bucket = new int[10][arr.</description>
    </item>
    
    <item>
      <title>杨成洁</title>
      <link>http://example.org/post/%E6%9D%A8%E6%88%90%E6%9D%B0/</link>
      <pubDate>Tue, 06 Aug 2019 22:06:24 +0800</pubDate>
      
      <guid>http://example.org/post/%E6%9D%A8%E6%88%90%E6%9D%B0/</guid>
      <description>I love you
je t&amp;rsquo;aime
ich liebe dich
σε αγαπώ se agapo
szertlek
taim i&amp;rsquo;ngra leat
mina armadtansind
mina rakastan sinua
ik zie u graag
Ti Amo
te amo vos amo
estevi milu
ik hou van jou
jeg elsker dig
eu amo-te
lingo gramo
tave myliu
te sakam
men seni sevirem
ami to may halobashi
kocham cie
te tu be besc
vivian
milujite
inhobbok
volim te
chit pade
āmi tomāke bhālobāshi</description>
    </item>
    
  </channel>
</rss>